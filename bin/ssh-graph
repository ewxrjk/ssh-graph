#! /usr/bin/perl -w
#
# Copyright Â© 2013-2016 Richard Kettlewell
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use POSIX;
use Greenend::SSH::Key;
use Greenend::SSH::User;

=head1 NAME

ssh-graph - Graph SSH key distribution and check for anomalies

=head1 SYNOPSIS

B<ssh-graph> [I<OPTIONS>] [B<-->] [I<USER>B<@>]I<HOST> ...

=head1 DESCRIPTION

B<ssh-graph> generates a Graphviz source file showing the relationship
between keys and hosts, and prints warnings about anything it doesn't
like.

It must be able to access the hosts listed on the command line via SSH.

=head1 USAGE

=head2 Options

=over 4

=item B<--no-local>

Suppresses access to the local host's I<.ssh> directory.

=item B<--local> I<NAME>

Enables access to the local host's I<.ssh> directory (which is the
default) and sets its name.
(By default the local node name is used.)

=item B<--strip> I<SUFFIX>

Specifies a suffix to strip from key names.

=item B<--strength> I<BITS>

The minimum security strength for a key not to be considered weak.
The default is 112.

=item B<--revoke> I<PATH>

Revoke all the keys listed in I<PATH>.

=item B<--show> I<CLASSES>

Lists the key classes that will be shown.  The possible key classes
are:

=over 4

=item B<all>

Show all keys.  This is the default.

=item B<trusted>

Show keys that something trusts.

=item B<weak>

Show weak keys.

=item B<revoked>

Show revoked keys.

=back

=item B<--connect> [I<USER1>B<@>]I<HOST1> [I<USER1>B<@>]I<HOST2>

Include a dotted edge from I<HOST1> to I<HOST2>.

=item B<--connect-root>

For all hosts, include a dotted edge from B<root@>I<HOST> to all other users on
I<HOST>.

=item B<--verbose>

Print progress messages to standard error.

=item B<--help>

Display a usage message.

=item B<--version>

Display the version string.

=back

=head2 Host Syntax

The simplest host syntax is just I<HOSTNAME> or
I<USER>B<@>I<HOSTNAME>.  This is familiar from SSH.  The hostname must
be recognizable to your local SSH client.

If a colon appears in the host then a more complex syntax is used.
The general form is:

I<CMD>B<:>I<ARG1>B<:>...B<:>I<ARGn>B<:>I<DIR>B<:>I<HOSTNAME>

Here I<CMD> and I<ARG1> to I<ARGn> form the command to execute to
reach the host; I<DIR> is the home directory to use; and I<HOSTNAME>
is the name to give the host in the output.

For example B<sudo:/root:root@local> means that B<sudo>(1) will be
used to elevate privilege and the B<.ssh> directory in B</root> will
be inspected, with the results reported as B<root@local>.

A more complex example is B<sudo:ssh:-x:root@remote:/root:root@remote>
which uses sudo locally to elevate privilege and then access a remote
host via SSH.

=head1 OUTPUT

The output is an input file for Graphviz.

=head2 Keys

Each key is shown as a box.  The first row is the name of the key, the
second the key type and the third the key strength and (in brackets)
size.

If the box is red then that means the key is weak (as defined by the
B<--strength> options) or revoked.

If the box filled in red then not only is the key weak or revoked, but it can
access some host.  It is recommended that you correct any such
situations.

If the box is grey then that means it can access no (known) host.
(The test for weakness overrides this check.)  Such keys may be
candidates for deletion, though they may be used by some host not
listed.  (To hide such keys, use the B<--no-show-untrusted> option.)

If the text is green then that means this key has more than one name.
This isn't necessarily a problem but is very confusing.

If the text is blue then that means this key shares it's name with at
least one other key.  This isn't necessarily a problem but is very
confusing.

=head2 Hosts

Each host is shown in an ellipse.

Inbound edges indicate keys that can access the host.  If they are
red, that means the key is weak or has been revoked.

Outbound edges to a key mean that the host has the private half of
that key.

If outbound edges are blue, that means more than one host has this
private key.  While there may be a good reason for this, it may also
be a problem that should be corrected.

If outbound edges are green, that means that the destination host can
be reached from a single source host using more than one key.  This is
probably a problem that should be corrected.

=head1 NOTES

=head2 Security Strengths

Security strengths are based on NIST recommendations in SP800-57 part
1 revision 3.

If you think 1024-bit RSA/DSA is good enough then you should request
a security strength of 80.

The default security strength of 112 corresponds to 2048-bit RSA/DSA
keys and 224-bit ECC keys.  This value may be raised in future
versions.

=head2 SSH Protocol Version 1

SSH protocol version 1 is considered broken and keys for it are
assigned a security strength of 0, regardless of key size.

=head2 Identifying Keys

Private keys are identified by looking for public keys in the I<.ssh>
directory and assuming that any appropriately named file must be a
copy of the corresponding private key.

=head1 BUGS

B<ssh-graph> can only include I<authorized_keys> files that it can
reach directly via SSH.  It should be able to make multiple SSH hops.

It should be possible to supply key control and trust information
collected 'offline'.

The data collection phase should be parallelizable.

The SSH config file should be read, to locate keys mentioned in
B<IdentityFile> directives.

OpenPGP keys are not yet supported.

=head1 SEE ALSO

B<ssh>(1), B<dot>(1)

=cut

our $VERSION = '0.7';

our %command = ();      # command to access host

our $verbose = 0;       # --verbose option
our $local = 1;         # consult local ~/.ssh
our $localName;         # name for local ~/.ssh
our @ak = ("authorized_keys", "authorized_keys2");
our $keySerial = 0;     # counter for key serial number
our $strip;             # suffix to strip from key names
our $minStrength = 112; # minimum security strength
our @show = ('all');    # keys to show
our $subgraphs = 0;	# use subgraph clusters (not pretty...)
our $connect_root = 0;  # auto-connect root@
our @connect_extra = ();# extra connections
our @revoke = ();       # revocation lists

# Convert the filename of a public key to the filename of the assumed
# corresponding private key.
sub privkey($) {
    local $_ = shift;
    if(/(.*)\.pub/) {
        return $1;
    } else {
        return undef;
    }
}

# Read the contents of a local file and return it as a list.
sub readLocalFile($) {
    my $path = shift;
    open(FILE, "<", $path) or die "ERROR: $path: $!\n";
    my @contents = <FILE>;
    close FILE;
    return @contents;
}

# Execute a command remotely and return its output as a list.
sub remoteCommand($$) {
    my ($host, $cmd) = @_;
    my @fullcmd = &{$command{$host}}($host, $cmd);
    print STDERR "$host: ", join(" ", @fullcmd), "\n" if $verbose;
    open(CMD, "-|", @fullcmd)
        or die "ERROR: $host: $!\n";
    my @contents = <CMD>;
    (close CMD) or die "ERROR: ssh $host: $!/$?\n";
    chomp @contents;
    return @contents;
}

# Read the contents of a remote file and return it as a list.
sub readRemoteFile($$) {
    my ($host, $file) = @_;
    return remoteCommand($host, "cat $file");
}

# List the remote files matching a glob pattern.
sub listRemoteFiles($$) {
    my ($host, $pattern) = @_;
    return remoteCommand($host, "ls -1 $pattern || true");
}

# Return true if a remote file exists.
sub remoteFileExists($$) {
    my ($host, $file) = @_;
    my @fullcmd = &{$command{$host}}($host, "test -e \Q$file\E");
    print STDERR "$host: ", join(" ", @fullcmd), "\n" if $verbose;
    return !system(@fullcmd);
}

# Records that a host trusts a list of keys
sub trustsKeys($@) {
    my ($user, $origin, @keys) = @_;
    my $lineno = 0;
    for my $line (@keys) {
        ++$lineno;
        next if $line =~ /^(#.*|\s*)$/;
        my $key = Greenend::SSH::Key->new(authorized_keys_line => $line,
                                          origin => "$origin:$lineno");
        $user->add_accepts_key($key);
        # TODO cope with conflicts
    }
}

# Construct the name for a key to display in the graph
sub keyName($) {
    my $key = shift;
    my $name = $key->{name};
    $name =~ s/\Q$strip\E$// if defined $strip;
    return $name;
}

## Parse command line

while(@ARGV > 0 and $ARGV[0] =~ /^-/) {
    my $opt = shift;
    if($opt eq "--help") {
        print
"Usage:
  ssh-graph [OPTIONS] [--] [USER@]HOST ...
Options:
  --no-local            Don't include local .ssh
  --local NAME          Read local .ssh, local host is NAME
  --connect [USER1@]HOST1 [USER2@]HOST2
                        Connect HOST1 to HOST2
  --connect-root        Auto-connect root@...
  --verbose             Verbose operation
  --strip SUFFIX        Suffix to strip from key names
  --strength BITS       Minimum SP800-57 security strength
  --revoke PATH         Revoke keys found in PATH
  --show CLASSES        Key classes to show
  --help                Display usage message
  --version             Display version string
";
        exit 0;
    } elsif($opt eq "--version") {
        print "$VERSION\n";
        exit 0;
    } elsif($opt eq "--no-local") {
        $local = 0;
    } elsif($opt eq "--local") {
        $local = 1;
        $localName = shift;
    } elsif($opt eq "--connect") {
        my $h1 = shift;
        my $h2 = shift;
        push(@connect_extra, [Greenend::SSH::User->new(name => $h1),
                              Greenend::SSH::User->new(name => $h2)]);
    } elsif($opt eq "--connect-root") {
        $connect_root = 1;
    } elsif($opt eq "--verbose") {
        $verbose = 1;
    } elsif($opt eq "--strip") {
        $strip = shift;
    } elsif($opt eq "--strength") {
        $minStrength = shift;
    } elsif($opt eq "--revoke") {
        push(@revoke, shift);
    } elsif($opt eq "--show") {
        @show = split(/,/, shift);
    } elsif($opt eq "--") {
        last;
    } else {
        die "ERROR: unknown option '$opt'\n";
    }
}

die "ERROR: no hosts specified\n" unless @ARGV > 0 or $local;

## Process set of keys to show
our %show = ();
for my $show (@show) {
    if($show eq 'all') {
        $show{'trusted'} = $show{'weak'} = $show{'revoked'} = 1;
    } elsif($show eq 'trusted') {
        $show{'trusted'} = 1;
    } elsif($show eq 'weak') {
        $show{'weak'} = 1;
    } elsif($show eq 'revoked') {
        $show{'revoked'} = 1;
    } else {
        die "ERROR: unknown --show argument '$show'\n";
    }
}

sub showable {
    my $key = shift;
    return 1 if $key->{issues}->{weak} and defined $show{'weak'};
    return 1 if $key->revoked() and defined $show{'revoked'};
    return 1 if $key->get_accepting_users() > 0 and defined $show{'trusted'};
    return 0;
}

## Read local keys and configuration
if($local) {
    if(!defined $localName) {
        my @u = POSIX::uname();
        $localName = $u[1];
    }
    print STDERR "Checking $localName...\n" if $verbose;
    my $localUser = Greenend::SSH::User->new(name => $localName);
    for my $pubkeypath (<$ENV{HOME}/.ssh/*.pub>) {
        my $pubkey = Greenend::SSH::Key->new(pub_key_file => $pubkeypath,
                                             origin => $pubkeypath);
        my $privkeypath = privkey($pubkeypath);
        if(defined $privkeypath && -e $privkeypath) {
            print STDERR "  Key: $pubkeypath\n" if $verbose;
            $localUser->add_knows_key($pubkey);
        }
    }
    for my $ak (@ak) {
        my $file = "$ENV{HOME}/.ssh/$ak";
        if(-e $file) {
            print STDERR "  Authorized keys: $file\n" if $verbose;
            trustsKeys($localUser, $file, readLocalFile($file));
        }
    }
    print STDERR "\n" if $verbose;
}

## Read remote keys and configuration

for my $host (@ARGV) {
    if($host =~ /:/) {
        my @hostbits = split(/:/, $host);
        $host = pop @hostbits;
        my $dir = pop @hostbits;
        $command{$host} = sub {
            my $host = shift;
            my $cmd = shift;
            return (@hostbits, "sh", "-c", "cd \Q$dir\E && " . $cmd);
        };
    } else {
        $command{$host} = sub {
            my $host = shift;
            my $cmd = shift;
            return ("ssh", "-x", $host, $cmd);
        };
    }
    print STDERR "Checking $host...\n" if $verbose;
    my $user = Greenend::SSH::User->new(name => $host);
    my @pubkeys = listRemoteFiles($host, ".ssh/*.pub");
    for my $pubkeypath (listRemoteFiles($host, ".ssh/*.pub")) {
        my $privkeypath = privkey($pubkeypath);
        if(defined $privkeypath && remoteFileExists($host, $privkeypath)) {
            print STDERR "  Key: $pubkeypath\n" if $verbose;
            my @pubkeyfile = readRemoteFile($host, $pubkeypath);
            my $pubkey = Greenend::SSH::Key->new(authorized_keys_line => $pubkeyfile[0],
                                                 origin => "$host:$pubkeypath");
            $user->add_knows_key($pubkey);
        }
    }
    for my $ak (@ak) {
        my $file = ".ssh/$ak";
        if(remoteFileExists($host, $file)) {
            print STDERR "  Authorized keys: $file\n" if $verbose;
            trustsKeys($user, "$host:$file", readRemoteFile($host, $file));
        }
    }
    print STDERR "\n" if $verbose;
}

## Read revocation lists
# TODO full OpenSSH RevokedKeys support.
for my $revoke_path (@revoke) {
    my $lineno = 0;
    for my $revoke_line (readLocalFile($revoke_path)) {
        ++$lineno;
        chomp $revoke_line;
        $revoke_line =~ s/^\s*//;
        $revoke_line =~ s/^#.*//;
        next if $revoke_line eq '';
        my $key = Greenend::SSH::Key->new(origin => "$revoke_path:$lineno",
                                        keyblob => $revoke_line);
        $key->revoke();
    }
}

# Report any problems found
print STDERR map("$_\n",
                 Greenend::SSH::Key::critique(strength => $minStrength,
                                              select => \&showable),
                 Greenend::SSH::User::critique(strength => $minStrength));

## Construct the graph

my @graph;
push(@graph, "digraph \"ssh-graph\" {\n",
     "  graph [rankdir=LR];\n");

# Node data for hosts, in subgraphs
for my $user (Greenend::SSH::User::all_users()) {
    my $serial = $user->{serial};
    my $name = $user->{name};
    my $p = "";
    my @keys = $user->get_known_keys();
    if(@keys > 0 && $subgraphs) {
	push(@graph, "  subgraph cluster_$serial {\n");
	#push(@graph, "    color=black;\n");
	$p = "  ";
    }
    push(@graph, "$p  u$serial [label=\"$name\"];\n");
    # For each key the user knows, an edge from user to key
    for my $key (@keys) {
        next unless showable($key);
        my @users = $key->get_knowing_users();
        my $color = exists $key->{issues}->{multiple_users} ? "black" : "blue";
        push(@graph, "$p  u$serial -> k", $key->get_id(), " [color=$color];\n");
    }
    if(@keys > 0 && $subgraphs) {
	push(@graph, "  }\n");
    }
}

if($connect_root) {
    for my $user (Greenend::SSH::User::all_users()) {
        if($user->{name} =~ /^root\@(.*)$/) {
            my $host = $1;
            my @mortals = grep($_ != $user
                               && ($_->{name} =~ m/^(.*\@)?\Q$host\E$/),
                               Greenend::SSH::User::all_users());
            for my $mortal (@mortals) {
                push(@graph, "  u$user->{serial} -> u$mortal->{serial} [style=dotted];\n");
            }
        }
    }
}

for my $pair (@connect_extra) {
    my $user1 = $pair->[0];
    my $user2 = $pair->[1];
    push(@graph, "  u$user1->{serial} -> u$user2->{serial} [style=dotted];\n");
}

## Node data for keys
for my $key (Greenend::SSH::Key::all_keys()) {
    my $fontcolor = "black";
    my $color = "black";
    my $fillcolor = "";
    next unless showable($key);
    if(exists $key->{issues}->{weak} or $key->revoked()) {
        # Weak and revoked keys outlined in red
        $color = "red";
        # Weak keys that something trusts filled in red
        if($key->get_accepting_users() > 0) {
            $fillcolor = "red";
            $fontcolor = "white";
        }
    } elsif($key->get_accepting_users() == 0) {
        # Non-weak keys that nothing trusts in grey
        $color = "grey";
        $fontcolor = "grey";
    }
    # Keys with multiple names in green (only one name is shown)
    $fontcolor = "green" if exists $key->{issues}->{multiple_names};
    # Keys which share names with other keys in blue
    $fontcolor = "blue" if exists $key->{issues}->{clashing_name};
    push(@graph, "  k", $key->get_id(),
         " [label=\"", keyName($key), "|$key->{type}|$key->{strength} ($key->{bits}b)\",",
         "shape=record,color=$color,fontcolor=$fontcolor");
    push(@graph, ",fillcolor=$fillcolor,style=filled") if $fillcolor ne '';
    push(@graph, "];\n");
    ## For each key that a host trusts, an edge from key to host
    for my $user ($key->get_accepting_users()) {
        my $color = "black";
        # If a user can access this user via multiple keys, color the
        # edge green
        $color = 'green'
            if exists $key->{issues}->{multiple_paths}->{$user->{name}};
        # Edges from weak and revoked keys in red
        $color = 'red' if $key->{strength} < $minStrength or $key->revoked();
        push(@graph, "  k", $key->get_id(), " -> u$user->{serial} [color=$color];\n");
    }
}

push(@graph, "}\n");

(print STDOUT @graph
    and close STDOUT)
    or die "ERROR: stdout: $!\n";
